1. Team members' names and uteids:
Jeffrey Li: jl47232
Katie Ensign: krh524 
Jared Hettinger: jah3735

2. A list of features/use cases you completed

   Main menu: the main menu of the app shows the user’s location in Google 
   Maps along with buttons that implement the other app’s features. The main 
   menu obtains the user’s location and displays it in an easy-to-read font.
   There are two settings for location updates: continuous and on-demand. If
   the continuous setting is enabled, the user's location is being periodically
   refreshed. If the default on-demand setting is enabled, the app gets a user's
   initial location, and will update if the refresh button is clicked.

   Button 1 ('Share'): This feature allows the user to text
   specific contact(s) their location via SMS services. There is also
   an option to add an additional message to be sent alongside the 
   location. The text includes a link to a google map with a pin on 
   the user's exact location. This allows anyone with internet access
   to receive the location, regardless of whether or not the have the app. 

   Button 2 ('Help!'): This feature allows the user to send a distress 
   text to emergency personnel (911) as well as to a predefined list of 
   emergency contacts. Since Travis County has not yet implemented 
   text-to-911, this feature will initially send to contacts on the user's
   emergency contact list.

   The user has the ability to select from a list of pre-existing, generic 
   emergency messages that correlate with a particular situation. If the 
   message is not specific enough, the user has the option to add additional 
   information.

   When sending the message, the user is required to confirm the message with 
   touch gestures. After correctly tracing the shape (circle), the user is able
   to send the message. This feature ultimately prevents accidental messages
   from being sent. In our prototype, we indicated that we wanted the user to
   be able to draw a triangle. However, after researching the implementation 
   of the GestureBuilder, it was determined that it was difficult to gauge
   the exact orientation and position that the user starts drawing the 
   shape. Thus, the shape of a circle is used for simplification in 
   development respects as well as real-time usage.

   Message confirmation:
   When sending messages to friend or emergency contacts, a BroadcastReceiver
   is created that displays a toast indicating the success/failure of an 
   SMS message.
   
   Menu options: About, Help, Getting Started
   Displays a Dialog with text for these three menu options.

   Menu options: Settings
   Continuous Updates:
   Switches between continuous location updates and on-demand location updates.
   Location is updated on-demand by default in order to save battery.
   
   Sound:
   Toggles sound on/off - Sound is on by default, and is used for feedback on
   button clicks.
   
   Show Coordinates:
   This option also provides the user with the option of toggling on/off the
   display of the exact location coordinates on the main menu. It's off by default
   because usually this information is meaningless to the average user. However,
   if someone is interested in knowing the exact coordinates, he or she can enable
   those in this menu.
   
   Edit Emergency Contacts:
   The user has the option of editing an emergency contact list. If the user sends an
   emergency text, these individuals will be notified in addition to 911. This setting
   shows the currently selected contacts. If the user clicks this setting, he or she
   can edit the list.
   
3. A list of features/use cases form your application prototype that you did not complete

   Alpha features:
   In the prototype, we discussed how we wanted to implement a feature that 
   allowed the user to also enter a number manually instead of selecting a
   contact. However, we decided that this feature seemed impractical and 
   would rarely (if ever) be used, especially in an emergency. Therefore we 
   have not included this feature in either our alpha release or our beta 
   release.
   
   All other alpha and beta features were implemented.


4. a list of features/use cases you added that were not part of the application
prototype

   Word-count limit:
   For sending standard SMS text messages through the Android SMSManager,
   text messages that exceed the max length of 160 characters can not be sent.
   In order to prevent this issue, a character count is displayed/updated with 
   each new character input and displays an error message when the character count
   has exceeded its max capacity.

   Landscape-mode Support:
   Through peer evaluations, it was noted that for smaller devices and screen
   sizes, the orientation and the auto-adjustment of the display made some aspects
   of the app harder to use. In order to faciliate the potential end-use of 
   landscape mode, each activity is designed with an easy-to-use and pleasant 
   landscape design.
   
   Dynamic Contact List:
   In response to feedback from peer evaluators, we decided to create our own
   custom contact list. This way, the user could select multiple contacts at the
   same time as well as see which contacts were already selected.
   
   Recent Contact List:
   In response to feedback from Mike, we created a list of recent contacts for 
   quick reference. In most cases, people will be sending location 
   to the same few people. This list saves the trouble of scrolling through
   the entire contact list each time.
   
   Automatic/On-Demand Location Updates:
   After feedback from the alpha, we realized that users were surprised by the 
   app continuously updating location. We gave it some thought, and it seemed
   that generally people would use the app just to get a quick location and 
   then send it. We then added on-demand location updates, where we just get
   location once when the app opens. There is a refresh button a user can click
   if he or she wants a newer location. We created a settings option so that
   continuous updates can be enabled in cases where the user is moving or needs
   the latest fix. Structuring our location updates this way also saves 
   battery life.

5. A list of the classes and major chunks you obtained from other 
   sources/include a reference. (URL and title okay)

from others
   General:
       all sound code - CS371M Tutorial 6
       creating help and about dialogs - CS371M Tutorial 3
       create an alert dialog - code adapted from http://stackoverflow.com/questions/2115758/how-to-display-alert-dialog-in-android

   Main Activity:
       isBetterLocation() and isSameProvider() - determines whether or not a
           location update is better than the current location.
           Adapted from android developer guide for location services:
           http://developer.android.com/guide/topics/location/strategies.html
       GetAddressTask class - class to implement async task for geocoding 
           addresses. Adapted from stackoverflow post:
           http://stackoverflow.com/questions/10198614/asynctask-geocoder-sometimes-crashes
       note - we also were influenced by these tutorials: 
           http://www.androidhive.info/2013/08/android-working-with-google-maps-v2/
	       http://wptrafficanalyzer.in/blog/showing-current-location-in-google-maps-with-gps-and-locationmanager-in-android/

   ShareMyLocation/Emergency: 
       using intents - influenced by CS371M Tutorial 1
       saving instance state - influenced by CS371M Tutorial 5
       live updates of text length - code adapted from http://stackoverflow.com/questions/20736874/how-to-add-character-counter-to-sms-app
       get a contact's phone number - code adapted from http://stackoverflow.com/questions/11218845/how-to-get-contacts-phone-number-in-android and http://stackoverflow.com/questions/9496350/pick-a-number-and-name-from-contacts-list-in-android-app
       hide soft keyboard - code adapted from http://stackoverflow.com/questions/4165414/how-to-hide-soft-keyboard-on-android-after-clicking-outside-edittext
       passing objects between activities - code adapted from http://stackoverflow.com/questions/13601883/how-to-pass-arraylist-of-objects-from-one-to-another-activity-using-intent-in-an
       
   Settings:
       code adapted from Tutorial 6
       
   Menu Action bar:
       issue with icons not showing in action bar - http://stackoverflow.com/questions/23230939/items-not-showing-in-the-actionbar-with-showasaction-always

   Contact List:
       selecting multiple contacts and displaying within ArrayAdapter - code influenced and adapted from http://www.mysamplecode.com/2012/07/android-listview-custom-layout-filter.html
       tab layout with swipeable views - http://www.androidhive.info/2013/10/android-tab-layout-with-swipeable-views-1/


6. A list of the classes and major chunks of code you completed yourself

   All of the UI and design code (landscape mode, styling, button/icon design, etc)

   Main Activity:
       location setup - initializeMap() and updateLocation()
       LocationListener
       standard android code for onCreate(), onResume(), onPause(), etc.

   ShareMyLocation/Emergency:
        onCreate(), onCreateOptionsMenu(), onOptionsItemSelected(),
        onCreateDialog()

   Everything else, except what's mentioned in 6.
